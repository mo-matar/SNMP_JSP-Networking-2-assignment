package project;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class SnmpFrame extends javax.swing.JFrame {

    public SnmpFrame() {
        initComponents();    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        systemButton = new javax.swing.JButton();
        udpButton = new javax.swing.JButton();
        arpButton = new javax.swing.JButton();
        snmpButton = new javax.swing.JButton();
        updateNameButton = new javax.swing.JButton();
        updateLocationButton = new javax.swing.JButton();
        contactLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        locationLabel = new javax.swing.JLabel();
        contactTextField = new javax.swing.JTextField();
        nameTextField = new javax.swing.JTextField();
        locationTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        udateContactButton = new javax.swing.JButton();
        tcpButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("mmll");

        systemButton.setBackground(new java.awt.Color(0, 123, 255));
        systemButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        systemButton.setForeground(new java.awt.Color(255, 255, 255));
        systemButton.setText("System");
        systemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemButtonActionPerformed(evt);
            }
        });

        udpButton.setBackground(new java.awt.Color(0, 123, 255));
        udpButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        udpButton.setForeground(new java.awt.Color(255, 255, 255));
        udpButton.setText("UDP");
        udpButton.setToolTipText("");
        udpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                udpButtonActionPerformed(evt);
            }
        });

        arpButton.setBackground(new java.awt.Color(0, 123, 255));
        arpButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        arpButton.setForeground(new java.awt.Color(255, 255, 255));
        arpButton.setText("ARP");
        arpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arpButtonActionPerformed(evt);
            }
        });

        snmpButton.setBackground(new java.awt.Color(0, 123, 255));
        snmpButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        snmpButton.setForeground(new java.awt.Color(255, 255, 255));
        snmpButton.setText("SNMP");
        snmpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snmpButtonActionPerformed(evt);
            }
        });

        updateNameButton.setBackground(new java.awt.Color(40, 167, 69));
        updateNameButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateNameButton.setForeground(new java.awt.Color(255, 255, 255));
        updateNameButton.setText("Update");
        updateNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateNameButtonActionPerformed(evt);
            }
        });

        updateLocationButton.setBackground(new java.awt.Color(40, 167, 69));
        updateLocationButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateLocationButton.setForeground(new java.awt.Color(255, 255, 255));
        updateLocationButton.setText("Update");
        updateLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateLocationButtonActionPerformed(evt);
            }
        });

        contactLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        contactLabel.setText("Contact");

        nameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        nameLabel.setText("Name");

        locationLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        locationLabel.setText("Location");

        contactTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        nameTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        locationTextField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        udateContactButton.setBackground(new java.awt.Color(40, 167, 69));
        udateContactButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        udateContactButton.setForeground(new java.awt.Color(255, 255, 255));
        udateContactButton.setText("Update");
        udateContactButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                udateContactButtonActionPerformed(evt);
            }
        });

        tcpButton.setBackground(new java.awt.Color(0, 123, 255));
        tcpButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        tcpButton.setForeground(new java.awt.Color(255, 255, 255));
        tcpButton.setText("TCP");
        tcpButton.setToolTipText("");
        tcpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tcpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(systemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(udpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(tcpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(arpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(snmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(contactLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(udateContactButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateNameButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(locationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateLocationButton)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(systemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(udpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tcpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(snmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactLabel)
                    .addComponent(contactTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(udateContactButton)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel)
                    .addComponent(updateNameButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locationLabel)
                    .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateLocationButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void systemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemButtonActionPerformed
        setVisibleUpdateForm(true);
        jTextArea2.setText("");
        try {
            URL url = new URL("http://localhost/part1/system_group.php");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();
            System.out.println("Raw JSON Response: " + response.toString());
            String jsonString = response.toString();

            int firstArrayEnd = jsonString.indexOf(']') + 1;
            int secondArrayStart = jsonString.indexOf('[', firstArrayEnd);

            if (secondArrayStart == -1) {
                JSONArray jsonArray1 = new JSONArray(jsonString);
                processJsonArray(jsonArray1, "System group info:");
            }

        } catch (IOException | JSONException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_systemButtonActionPerformed

    private void processJsonArray(JSONArray jsonArray, String header) {
        StringBuilder formattedText = new StringBuilder();
        formattedText.append(header).append("\n");
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            String label = jsonObject.optString("label", "N/A");
            String value = jsonObject.optString("value", "N/A");
            formattedText.append(String.format("%s: %s\n", label, value));
        }
        formattedText.append("\n");
        jTextArea2.append(formattedText.toString());
    }
    private void udateContactButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_udateContactButtonActionPerformed
       String phpServerUrl = "http://localhost/part1/system_group.php";
        String contactNewValue=this.contactTextField.getText();
         contactTextField.setText("");
        try {
            URL url = new URL(phpServerUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);

            OutputStream outputStream = connection.getOutputStream();
            OutputStreamWriter writer = new OutputStreamWriter(outputStream);
            StringBuilder data = new StringBuilder();
            data.append("oid=1.3.6.1.2.1.1.4.0&new_value=").append(contactNewValue);
            writer.write(data.toString());
            writer.flush();
            writer.close();
            outputStream.close();
            systemButton.doClick();
            connection.disconnect();
        } catch (IOException e) {
            e.printStackTrace();
        }
        
                       
        
    }//GEN-LAST:event_udateContactButtonActionPerformed

    private void updateNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateNameButtonActionPerformed
        String phpServerUrl = "http://localhost/part1/system_group.php";
        String nameNewValue = this.nameTextField.getText();
        try {
            URL url = new URL(phpServerUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);

            OutputStream outputStream = connection.getOutputStream();
            OutputStreamWriter writer = new OutputStreamWriter(outputStream);
            StringBuilder data = new StringBuilder();
            data.append("oid=1.3.6.1.2.1.1.5.0&new_value=").append(nameNewValue);
            writer.write(data.toString());
            writer.flush();
            writer.close();
            outputStream.close();
            systemButton.doClick();
            connection.disconnect();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_updateNameButtonActionPerformed

    private void updateLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateLocationButtonActionPerformed
        String phpServerUrl = "http://localhost/part1/system_group.php";
        String locationNewValue = this.locationTextField.getText();
        locationTextField.setText("");

        try {
            URL url = new URL(phpServerUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);

            OutputStream outputStream = connection.getOutputStream();
            OutputStreamWriter writer = new OutputStreamWriter(outputStream);
            StringBuilder data = new StringBuilder();
            data.append("oid=1.3.6.1.2.1.1.6.0&new_value=").append(locationNewValue);
            writer.write(data.toString());
            writer.flush();
            writer.close();
            outputStream.close();
            systemButton.doClick();
            connection.disconnect();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_updateLocationButtonActionPerformed

    private void setVisibleUpdateForm(boolean isVisible) {
        updateNameButton.setVisible(isVisible);
        updateLocationButton.setVisible(isVisible);
        udateContactButton.setVisible(isVisible);
        nameTextField.setVisible(isVisible);
        contactTextField.setVisible(isVisible);
        locationTextField.setVisible(isVisible);
        locationLabel.setVisible(isVisible);
        nameLabel.setVisible(isVisible);
        contactLabel.setVisible(isVisible);
    }
    private void udpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_udpButtonActionPerformed
        setVisibleUpdateForm(false);
        jTextArea2.setText("");
        try {
            URL url = new URL("http://localhost/part1/udp_snmp.php");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            JSONArray jsonArray = new JSONArray(response.toString());
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject obj = jsonArray.getJSONObject(i);
                int index = obj.getInt("index");
                String entry = obj.getString("entry");
                jTextArea2.append("Index: " + index + ", Entry: " + entry + "\n");
            }
        } catch (IOException | JSONException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_udpButtonActionPerformed

    private void arpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arpButtonActionPerformed
        setVisibleUpdateForm(false);
        jTextArea2.setText("");

        try {
            URL url = new URL("http://localhost/part1/arp.php");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();
            JSONArray jsonArray = new JSONArray(response.toString());
            final int INDEX_WIDTH = 10;
            final int MAC_WIDTH = 40;
            final int IP_WIDTH = 25;
            final int TYPE_WIDTH = 4;

            StringBuilder table = new StringBuilder();
            table.append(String.format("%-" + INDEX_WIDTH + "s %-" + MAC_WIDTH + "s %-" + IP_WIDTH + "s %" + TYPE_WIDTH + "s%n", "Index", "MAC", "IP Address", "Type"));
            table.append("-".repeat(INDEX_WIDTH)).append(" ").append("-".repeat(MAC_WIDTH)).append(" ").append("-".repeat(IP_WIDTH)).append(" ").append("-".repeat(TYPE_WIDTH)).append("\n");

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                int index = jsonObject.optInt("index", -1);  // Default to -1 if missing
                String mac = jsonObject.optString("mac", "").trim();
                String ip = jsonObject.optString("ip", "").replace("IpAddress: ", "").trim();
                String type = jsonObject.optString("type", "").replace("INTEGER: ", "").trim();

                String formattedMac = mac.equals("\"\"") ? "-----------------------------------------                 " : mac;
                String formattedIp = ip.isEmpty() ? "N/A" : ip;
                String formattedType = type.isEmpty() ? "N/A" : type;

                table.append(String.format("%-" + INDEX_WIDTH + "d %-" + MAC_WIDTH + "s %-" + IP_WIDTH + "s %" + TYPE_WIDTH + "s%n", index, formattedMac, formattedIp, formattedType));
            }
            jTextArea2.setText(table.toString());

        } catch (IOException | JSONException e) {
            e.printStackTrace(); 
        }
    }//GEN-LAST:event_arpButtonActionPerformed

    private void snmpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snmpButtonActionPerformed
        setVisibleUpdateForm(false);
        jTextArea2.setText("");

        try {
            URL url = new URL("http://localhost/part1/snmp_stats.php");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            JSONObject jsonResponse = new JSONObject(response.toString());
            JSONArray walkArray = jsonResponse.optJSONArray("walk");

            if (walkArray == null) {
                jTextArea2.setText("No data available.");
                return;
            }

            final int NAME_WIDTH = 30;
            final int VALUE_WIDTH = 20;

            StringBuilder table = new StringBuilder();
            table.append(String.format("%-" + NAME_WIDTH + "s %-" + VALUE_WIDTH + "s%n", "Name", "Value"));
            table.append("-".repeat(NAME_WIDTH)).append(" ").append("-".repeat(VALUE_WIDTH)).append("\n");

            for (int i = 0; i < walkArray.length(); i++) {
                JSONObject jsonObject = walkArray.getJSONObject(i);
                String name = jsonObject.optString("name", "N/A");
                String value = jsonObject.optString("value", "N/A");

                table.append(String.format("%-" + NAME_WIDTH + "s %-" + VALUE_WIDTH + "s%n", name, value));
            }
            jTextArea2.setText(table.toString());

        } catch (IOException | JSONException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_snmpButtonActionPerformed

    private void tcpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tcpButtonActionPerformed
        setVisibleUpdateForm(false);
        jTextArea2.setText("");
        try {
            URL url = new URL("http://localhost/part1/tcp_snmp.php");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            JSONArray jsonArray = new JSONArray(response.toString());
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject obj = jsonArray.getJSONObject(i);
                int index = obj.getInt("index");
                String entry = obj.getString("entry");
                jTextArea2.append("Index: " + index + ", Entry: " + entry + "\n");
            }
        } catch (IOException | JSONException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_tcpButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton arpButton;
    private javax.swing.JLabel contactLabel;
    private javax.swing.JTextField contactTextField;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton snmpButton;
    private javax.swing.JButton systemButton;
    private javax.swing.JButton tcpButton;
    private javax.swing.JButton udateContactButton;
    private javax.swing.JButton udpButton;
    private javax.swing.JButton updateLocationButton;
    private javax.swing.JButton updateNameButton;
    // End of variables declaration//GEN-END:variables
}
